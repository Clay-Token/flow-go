// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// ChunksQueue is an autogenerated mock type for the ChunksQueue type
type ChunksQueue struct {
	mock.Mock
}

// AtIndex provides a mock function with given fields: index
func (_m *ChunksQueue) AtIndex(index int64) (*flow.Chunk, error) {
	ret := _m.Called(index)

	var r0 *flow.Chunk
	if rf, ok := ret.Get(0).(func(int64) *flow.Chunk); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Chunk)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestIndex provides a mock function with given fields:
func (_m *ChunksQueue) LatestIndex() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreChunk provides a mock function with given fields: _a0
func (_m *ChunksQueue) StoreChunk(_a0 *flow.Chunk) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Chunk) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*flow.Chunk) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
